# -*- coding: utf-8 -*-
"""PySpark_Music.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_vLa0Yg-Ia9CpdekUn3DI8z0qjbk5TkF

# **Welcome to the Notebook**

### Let's mount the google drive
"""

from google.colab import drive
drive.mount('/content/drive')

"""# Task 1 : 
Installing pyspark module
"""

!pip install pyspark

"""Importing the modules """

from pyspark.sql import SparkSession
from pyspark.sql.functions import count, desc , col, max ,struct
import matplotlib.pyplot as plts

"""creating spark session"""

spark = SparkSession.builder.appName('spark_app').getOrCreate()

"""# Task 2 : 
importing the *Listenings.csv* file: 
"""

listening_csv_path= '/content/drive/MyDrive/dataset/listenings.csv'
listening_df=spark.read.format('csv').option('inferSchema',True).option('header',True).load(listening_csv_path)

"""let's check the data:"""

listening_df.show(10,False)

"""let's delete useless columns:"""

listening_df=listening_df.drop('date')

"""drop the null rows:"""

listening_df=listening_df.na.drop()

"""let's check the dataset again:"""

listening_df.show(10,False)

"""let's see the schema: """

listening_df.printSchema()

"""let's see the shape of our dataframe: """

shape=(listening_df.count() , len(listening_df.columns))
print(shape)

"""# Task 3:

**Query #0:**
select two columns: track and artist
"""

q0=listening_df.select('artist','track')
q0.show(10,False)

"""**Query #1**:

Let's find all of the records of those users who have listened to ***Rihanna***
"""

q1=listening_df.select('*').filter(listening_df.artist=='Rihanna')
q1.show(10,False)

"""**Query #2:**

Let's find top 10 users who are fan of ***Rihanna***
"""

q2=listening_df.select('user_id').filter(listening_df.artist=='Rihanna').groupBy('user_id').agg(count('user_id').alias('count')).orderBy(desc('count')).limit(10)
q2.show()

listening_df.columns

"""**Query #3:**

find top 10 famous tracks 
"""

q3 = listening_df.select('artist','track').groupBy('artist','track').agg(count('*').alias('num')).orderBy(desc('num')).limit(10)
q3.show()

"""**Query #4:**

find top 10 famous tracks of ***Rihanna*** 
"""

q4=listening_df.select('artist','track').filter(listening_df.artist=='Rihanna').groupBy('artist','track').agg(count('*').alias('num')).orderBy(desc('num')).limit(10)
q4.show()

listening_df.columns

"""**Query #5:**

find top 10 famous albums 
"""

q5=listening_df.select('artist','album').groupBy('artist','album').agg(count('*').alias('num')).orderBy(desc('num')).limit(10)
q5.show()

"""# Task 4 :
importing the ***genre.csv*** file:
"""

genre_path='/content/drive/MyDrive/dataset/genre.csv'
genre_df=spark.read.format('csv').option('inferSchema',True).option('header',True).load(genre_path)
#listening_df=spark.read.format('csv').option('inferSchema',True).option('header',True).load(listening_csv_path)

"""let's check the data"""

genre_df.show(10,False)

"""Let's inner join these two data frames"""

data = listening_df.join(genre_df,how='inner',on=['artist'])
data.show(10,False)

"""**Query #6**

find top 10 users who are fan of ***pop*** music
"""

q6 = data.select('user_id','genre').filter(data.genre=='pop').groupBy('user_id','genre').agg(count('user_id').alias('num')).orderBy(desc('num')).limit(10)
q6.show()

genre_df.columns

listening_df.columns

"""**Query #7**

find top 10 famous genres
"""

q7 = data.select('genre').groupBy('genre').agg(count('*').alias('num')).orderBy(desc('num')).limit(10)
q7.show()

"""# Task 5:
**Query #8**

find out each user favourite genre
"""

q81=data.select('user_id','genre').groupBy('user_id','genre').agg(count('*').alias('num')).orderBy("user_id")
q81.show()

q82=q81.groupBy('user_id').agg(max(struct(col('num'),col('genre'))).alias('max')).select(col('user_id'),col('max.genre'))
q82.show()

"""**Query #9**

find out how many pop,rock,metal and hip hop singers we have

and then visulize it using bar chart 
"""

genre_df.printSchema()

q9=genre_df.select('genre').filter((col('genre')=='pop') | (col('genre')=='rock') |(col('genre')=='metal') |(col('genre')=='hip hop')).groupBy('genre').agg(count("genre").alias('total'))
q9.show(10)

"""Now, let's visualize the results using ***matplotlib***"""

q9_list=q9.collect()
q9_list

labels=[row['genre'] for row in q9_list]
counts=[row['total'] for row in q9_list]

print(labels)
print(counts)

"""now lets visualize these two lists using a bar chart"""

plts.bar(labels,counts)

